#!/bin/sh

PLACEHOLDER="#@#@#@#@#@"
NEWLINE_PLACEHOLDER="#%#%#%#%#%#%"

# Make sure Servald has at least one identity, needed to verify signatures
if [ -z `SERVALINSTANCE_PATH=/etc/serval servald keyring list` ]; then
	SERVALINSTANCE_PATH=/etc/serval servald keyring add
fi

touch /etc/config/applications

# Make sure avahi-client is running. If not, start it.
if [ -z `pgrep avahi-client` ]; then
	avahi-client &
	sleep 2
fi

# Send signal to avahi-client so it will dump cache to /tmp/avahi-client.out
kill -s USR1 `pgrep avahi-client`
sleep 2

# remove expired advertisements from UCI
# if expired UCI entry has fingerprint/signature and localapp, rm /etc/avahi/services/<fingerprint>.service
now=`date +%s`
expiration_period=`uci get applications.settings.expiration`
next_expire=`date +%c -D %s -d $(expr $(date +%s) + "$expiration_period")`
apps=`cat /etc/config/applications |grep "^config application " |cut -c21- |sed -e s/\'$//`
for app in $apps; do
	app_expiration=`uci get applications.$app.expiration`
	if [ -z "$app_expiration" -o "$app_expiration" == "0" ]; then
		continue
	fi
	if [ `date +%s -D %c -d "$app_expiration"` -le "$now" ]; then
		app_fingerprint=`uci get applications.$app.fingerprint`
		localapp=`uci get applications.$app.localapp`
		#autorenew=`uci get applications.$app.autorenew`
		#echo "autorenew $autorenew"
		#if [ -n "$autorenew" -a "$autorenew" == 1 ]; then
			# update expiration UCI field, then move on
			#uci set applications.$app.expiration="$next_expire"
		#else
			if [ -n "$app_fingerprint" -a -n "$localapp" -a "$localapp" == "1" ]; then
				#remove avahi service file
				rm /etc/avahi/services/$app.service
			fi
			# remove entry
			uci delete applications.$app
			continue
		#fi
	fi
	
	# check connectivity
	checkconnect=`uci get applications.settings.checkconnect`
	if [ "$checkconnect" == "1" ]; then
		app_ipaddr=`uci get applications.$app.ipaddr |sed -e s/"^[[:alpha:]]*:\/\/"/""/ |grep -E -o "^[^/:]+"`
		app_port=`uci get applications.$app.port`
		if [ -z "$app_port" ]; then
			local url_port=`uci get applications.$app.ipaddr |grep -E -o ":[[:digit:]]+" |sed s/':'/''/`
			if [ -n "$url_port" ]; then
				app_port="$url_port"
			else
				app_port="80"
			fi
		fi
		nc -z -w 5 "$app_ipaddr" "$app_port"
		# if connectivity, uci set applications.$app.noconnect="0"
		if [ $? -eq 0 ]; then
			uci set applications.$app.noconnect="0"
		else
			noconnect=`uci get applications.$app.noconnect`
			if [ "$noconnect" == "2" ]; then
				app_fingerprint=`uci get applications.$app.fingerprint`
				localapp=`uci get applications.$app.localapp`
				# remove UCI & service file
				uci delete applications.$app
				if [ -n "$app_fingerprint" -a -n "$localapp" -a "$localapp" == "1" ]; then
					rm /etc/avahi/services/$app.service
				fi
			else
				# noconnect++
				noconnect=`expr "$noconnect" + 1`
				uci set applications.$app.noconnect="$noconnect"
			fi
		fi
	fi
done
uci commit applications

while read -r service; do
	#parse $service
	#format:
	#	<interface>;<protocol>;<hostname long>;<type>;<domain>;<hostname.domain>;<ip addr>;<port>;<txt record>
	#	     1     ;    2     ;        3      ;   4  ;   5    ;        6        ;    7    ;  8   ;      9

	# Service advertisements must have txt records
	txt=`echo $service | cut -d ';' -f9-`
	if [ -z "$txt" ]; then
		continue
	fi

	# get fingerprint/signature of service
	fingerprint=`echo $txt |grep -o fingerprint=[^\"]* |cut -c13-`
	signature=`echo $txt |grep -o signature=[^\"]* |cut -c11-`

	# make sure fingerprint and signature are hex strings of the correct length
	if [ -z "`echo "$fingerprint" |grep -E "^[[:xdigit:]]+$"`" -o \
		-z "`echo "$signature" |grep -E "^[[:xdigit:]]+$"`" -o \
		"`expr length "$fingerprint"`" != "64" -o \
		"`expr length "$signature"`" != "128" ]; then
		
		continue
	fi

	# if service found in UCI, compare signatures. if sigs different, update app
	match=''
	apps=`cat /etc/config/applications |grep "^config application " |cut -c21- |sed -e s/\'$//`
	for app in $apps; do
		if [ `uci get applications.$app.fingerprint` == $fingerprint ]; then
			if [ `uci get applications.$app.signature` == $signature ]; then
				match=true
			fi
		fi
	done
	if [ $match ]; then
		continue
	fi

	# Gather service information
	APPNAME=`echo $txt |grep -o application=[^\"]* |cut -c13- |sed -e s/"\&#10;"/"$NEWLINE_PLACEHOLDER"/g |sed -e s/"\&#13;"/"\r"/g |sed -e s/"\&quot;"/'"'/g |sed -e s/"&"/"\&amp;"/g |sed -e s/"<"/"\&lt;"/g |sed -e s/">"/"\&gt;"/g |sed -e s/'"'/"\&quot;"/g |sed -e s/"$NEWLINE_PLACEHOLDER"/"\&#10;"/g |sed -e s/"\r"/"\&#13;"/g`
	#UUID="$fingerprint"
	protocol=`echo $service |awk -F ';' '{print $2}' |sed -e s/"\&#10;"/"$NEWLINE_PLACEHOLDER"/g |sed -e s/"\&#13;"/"\r"/g |sed -e s/"\&quot;"/'"'/g |sed -e s/"&"/"\&amp;"/g |sed -e s/"<"/"\&lt;"/g |sed -e s/">"/"\&gt;"/g |sed -e s/'"'/"\&quot;"/g |sed -e s/"$NEWLINE_PLACEHOLDER"/"\&#10;"/g |sed -e s/"\r"/"\&#13;"/g`
	full_type=`echo $service |awk -F ';' '{print $4}'`
	domain=`echo $service |awk -F ';' '{print $5}'`
	ttl=`echo $txt |grep -o ttl=[^\"]* |cut -c5-`
	ipaddr=`echo $txt |grep -o ipaddr=[^\"]* |cut -c8- |sed -e s/"<"/"%3C"/g |sed -e s/">"/"%3E"/g |sed -e s/"[[:space:]]"/"%20"/g |sed -e s/'"'/"%22"/g`
	port=`echo $service | awk -F ';' '{print $8}'`
	service_uuid=`echo "$ipaddr$port" |awk 'BEGIN{FS="";for(n=0;n<256;n++)ord[sprintf("%c",n)]=n}{for(i=1;i<=NF;i++)if(match($i,/[a-zA-Z0-9]/)){printf $i} else {printf "_"ord[$i]}}'`
	UUID="$service_uuid"
	icon=`echo $txt |grep -o icon=[^\"]* |cut -c6- |sed -e s/"<"/"%3C"/g |sed -e s/">"/"%3E"/g |sed -e s/"[[:space:]]"/"%20"/g |sed -e s/'"'/"%22"/g`
	description=`echo $txt |grep -o description=[^\"]* |cut -c13- |sed -e s/"\&#10;"/"$NEWLINE_PLACEHOLDER"/g |sed -e s/"\&#13;"/"\r"/g |sed -e s/"\&quot;"/'"'/g |sed -e s/"&"/"\&amp;"/g |sed -e s/"<"/"\&lt;"/g |sed -e s/">"/"\&gt;"/g |sed -e s/'"'/"\&quot;"/g |sed -e s/"$NEWLINE_PLACEHOLDER"/"\&#10;"/g |sed -e s/"\r"/"\&#13;"/g`
	types=`echo $txt |grep -o type=[^\"]* |cut -c6- |sort |sed 's/ /$PLACEHOLDER/g' |sed -e s/"\&#10;"/"$NEWLINE_PLACEHOLDER"/g |sed -e s/"\&#13;"/"\r"/g |sed -e s/"\&quot;"/'"'/g |sed -e s/"&"/"\&amp;"/g |sed -e s/"<"/"\&lt;"/g |sed -e s/">"/"\&gt;"/g |sed -e s/'"'/"\&quot;"/g |sed -e s/"$NEWLINE_PLACEHOLDER"/"\&#10;"/g |sed -e s/"\r"/"\&#13;"/g`
	expiration=`echo $txt |grep -o expiration=[^\"]* |cut -c12-`

	##################### INPUT VALIDATION/SANITIZING ##########################
	# HTML ENCODING: sed -e s/"\&#10;"/"$NEWLINE_PLACEHOLDER"/g |sed -e s/"\&#13;"/"\r"/g |sed -e s/"\&quot;"/'"'/g |sed -e s/"&"/"\&amp;"/g |sed -e s/"<"/"\&lt;"/g |sed -e s/">"/"\&gt;"/g |sed -e s/'"'/"\&quot;"/g |sed -e s/"$NEWLINE_PLACEHOLDER"/"\&#10;"/g |sed -e s/"\r"/"\&#13;"/g
	# URL ENCODING: sed -e s/"<"/"%3C"/g |sed -e s/">"/"%3E"/g |sed -e s/"[[:space:]]"/"%20"/g |sed -e s/'"'/"%22"/g
	# is_uint: grep -E "^[[:digit:]]+$"
	# is_hex: grep -E "^[[:xdigit:]]+$"
	# is_port: if [ $? -eq 0 -a $test -ge 0 -a $test -le 65535 ]
	# uci_encode: awk 'BEGIN{FS="";for(n=0;n<256;n++)ord[sprintf("%c",n)]=n}{for(i=1;i<=NF;i++)if(match($i,/[a-zA-Z0-9]/)){printf $i} else {printf "_"ord[$i]}}'
	
	if [ -z "$APPNAME" -o -z "$icon" -o -z "$description" ]; then
		continue
	fi
	
	if [ -z "`echo "$ttl" |grep -E "^[[:digit:]]+$"`" ]; then
		continue
	fi
	
	if [ -z "`echo "$port" |grep -E "^[[:digit:]]+$"`" -o "$port" -lt 0 -o "$port" -gt 65535 ]; then
		continue
	fi
	if [ "$port" == "0" ]; then
		port=""
	fi
	
	if [ -n "$expiration" -a -z "`echo "$expiration" |grep -E "^[[:digit:]]+$"`" -a "$expiration" -gt 0 ]; then
		continue
	fi
	
	# check connectivity
	app_port="$port"
	app_ipaddr=`echo "$ipaddr" |sed -e s/"^[[:alpha:]]*:\/\/"/""/ |grep -E -o "^[^/:]+"`
	if [ -z "$app_port" ]; then
		local url_port=`echo "$ipaddr" |grep -E -o ":[[:digit:]]+" |sed s/':'/''/`
		if [ -n "$url_port" ]; then
			app_port="$url_port"
		else
			app_port="80"
		fi
	fi
	nc -z -w 5 "$app_ipaddr" "$app_port"
	if [ $? -ne 0 ]; then
		echo "Could not connect to service $app_ipaddr on $app_port"
		continue
	fi
	
	##################### VERIFY SIGNATURE ##########################
	app_types=''
	for type in $types; do
		type=`echo -n $type |sed -e 's/$PLACEHOLDER/ /g'`
		app_types="$app_types<txt-record>type=$type</txt-record>"
	done
	sig_tmpl="<type>$full_type</type>
<domain-name>$domain</domain-name>
<port>$port</port>
<txt-record>application=$APPNAME</txt-record>
<txt-record>ttl=$ttl</txt-record>
<txt-record>ipaddr=$ipaddr</txt-record>
$app_types
<txt-record>icon=$icon</txt-record>
<txt-record>description=$description</txt-record>
<txt-record>expiration=$expiration</txt-record>"

	echo "$sig_tmpl" |SERVALINSTANCE_PATH=/etc/serval serval-verify -s $signature -i $fingerprint
	if [ $? -ne 0 ]; then
		echo "Service failed verification"
		echo "$sig_tmpl"
		continue
	fi

	# Submit service information to UCI
	uci set applications.$UUID=application
	uci set applications.$UUID.name="$APPNAME"
	uci set applications.$UUID.protocol="$protocol"
	if [ -n $ttl ]; then
		uci set applications.$UUID.ttl="$ttl"
	fi
	uci set applications.$UUID.ipaddr="$ipaddr"
	if [ -n $port ]; then
		uci set applications.$UUID.port="$port"
	fi
	uci set applications.$UUID.uuid="$service_uuid"
	uci set applications.$UUID.fingerprint="$fingerprint"
        uci set applications.$UUID.signature="$signature"
	uci set applications.$UUID.icon="$icon"
	uci set applications.$UUID.description="$description"
	if [ -n $expiration ]; then
		expiration_time=`date +%c -D %s -d $(( $(date +%s) +$expiration ))`
		uci set applications.$UUID.expiration="$expiration_time"
	fi
	autoapprove=`uci get applications.settings.autoapprove`
	if [ -n "$autoapprove" -a "$autoapprove" == "1" ]; then
		uci set applications.$UUID.approved="1"
	fi
	uci set applications.$UUID.noconnect="0"

	# check if service is in applications.known_apps
	found=`uci get applications.known_apps.$UUID`
	if [ -n "$found" -a "$found" == "approved" ]; then
		uci set applications.$UUID.approved="1"
	elif [ -n "$found" -a "$found" == "blacklisted" ]; then
		uci set applications.$UUID.approved="0"
	fi
	
	# Adding service types with whitespace in them takes some extra work
	uci delete applications.$UUID.type
	uci set applications.$UUID.type="$PLACEHOLDER"
	uci commit applications
	typeList=""
	for type in $types; do
		type=`echo -n $type |sed -e 's/$PLACEHOLDER/ /g'`
		typeList="$typeList\n\tlist type '$type'"
	done
	typeList=`echo "$typeList" |cut -c3- |sed -e s/"\&"/'\\\\\\\&'/`
	#sed -i -e s/"\toption type '$PLACEHOLDER'"/"$typeList"/ /etc/config/applications
	# this awk script will replace only the last occurance of $PLACEHOLDER, instead of sed which replaces all occurances
	awk -v PLACEHOLDER="$PLACEHOLDER" -v typeList="$typeList" "/\toption type \x27$PLACEHOLDER\x27/"'{x=NR} {a[NR]=$0;}END{for(i=1;i<=NR;i++){if(i==x){gsub("\toption type \x27" PLACEHOLDER "\x27",typeList,a[i]);print a[i];}else{ print a[i];}}}' /etc/config/applications > /tmp/applications
	cp /tmp/applications /etc/config/applications

done < "/tmp/avahi-client.out"

exit